// Code generated by "stringer -type=nrFlags,rlFlags -output reaper_string.go"; DO NOT EDIT.

package types

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NR_BHM_FLAG-1]
	_ = x[NR_CONTINUE-2]
}

const _nrFlags_name = "NR_BHM_FLAGNR_CONTINUE"

var _nrFlags_index = [...]uint8{0, 11, 22}

func (i nrFlags) String() string {
	i -= 1
	if i >= nrFlags(len(_nrFlags_index)-1) {
		return "nrFlags(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _nrFlags_name[_nrFlags_index[i]:_nrFlags_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NRLE_VALID-1]
	_ = x[NRLE_REAP_ID_RECORD-2]
	_ = x[NRLE_CALL-4]
	_ = x[NRLE_COMPETITION-8]
	_ = x[NRLE_CLEANUP-16]
}

const (
	_rlFlags_name_0 = "NRLE_VALIDNRLE_REAP_ID_RECORD"
	_rlFlags_name_1 = "NRLE_CALL"
	_rlFlags_name_2 = "NRLE_COMPETITION"
	_rlFlags_name_3 = "NRLE_CLEANUP"
)

var (
	_rlFlags_index_0 = [...]uint8{0, 10, 29}
)

func (i rlFlags) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _rlFlags_name_0[_rlFlags_index_0[i]:_rlFlags_index_0[i+1]]
	case i == 4:
		return _rlFlags_name_1
	case i == 8:
		return _rlFlags_name_2
	case i == 16:
		return _rlFlags_name_3
	default:
		return "rlFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
