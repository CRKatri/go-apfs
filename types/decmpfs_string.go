// Code generated by "stringer -type=compMethod -output decmpfs_string.go"; DO NOT EDIT.

package types

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CMP_TYPE1-1]
	_ = x[CMP_ATTR_ZLIB-3]
	_ = x[CMP_RSRC_ZLIB-4]
	_ = x[CMP_ATTR_LZVN-7]
	_ = x[CMP_RSRC_LZVN-8]
	_ = x[CMP_ATTR_UNCOMPRESSED-9]
	_ = x[CMP_RSRC_UNCOMPRESSED-10]
	_ = x[CMP_ATTR_LZFSE-11]
	_ = x[CMP_RSRC_LZFSE-12]
	_ = x[CMP_MAX-255]
}

const (
	_compMethod_name_0 = "CMP_TYPE1"
	_compMethod_name_1 = "CMP_ATTR_ZLIBCMP_RSRC_ZLIB"
	_compMethod_name_2 = "CMP_ATTR_LZVNCMP_RSRC_LZVNCMP_ATTR_UNCOMPRESSEDCMP_RSRC_UNCOMPRESSEDCMP_ATTR_LZFSECMP_RSRC_LZFSE"
	_compMethod_name_3 = "CMP_MAX"
)

var (
	_compMethod_index_1 = [...]uint8{0, 13, 26}
	_compMethod_index_2 = [...]uint8{0, 13, 26, 47, 68, 82, 96}
)

func (i compMethod) String() string {
	switch {
	case i == 1:
		return _compMethod_name_0
	case 3 <= i && i <= 4:
		i -= 3
		return _compMethod_name_1[_compMethod_index_1[i]:_compMethod_index_1[i+1]]
	case 7 <= i && i <= 12:
		i -= 7
		return _compMethod_name_2[_compMethod_index_2[i]:_compMethod_index_2[i+1]]
	case i == 255:
		return _compMethod_name_3
	default:
		return "compMethod(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
